import hashlib

def hash_sha256_hex(input):
    # helper function to hash strings and return a hex encoded hash
    hasher = hashlib.sha256()
    hasher.update(input.encode())
    return hasher.hexdigest()

def get_merkle_root(nodes):
    branches = [t.hash for t in nodes]

    while len(branches) > 1:
        if (len(branches) % 2) == 1:
            branches.append(branches[-1])

        branches = [hash_sha256_hex(a + b) for (a, b) in zip(branches[0::2], branches[1::2])]

    return branches[0]

def deterministic_fisher_yates(arr, entropy):
    # Shuffle an array using fisher yates shuffle with new ranom numbers generated by rehashing the entropy source with i
    for i in range(len(arr)-1,0,-1):
        # Pick a random index from 0 to i
        j = abs(int(hash_sha256_hex(entropy + str(i)), base=16)) % i+1
 
        # Swap arr[i] with the element at random index
        arr[i],arr[j] = arr[j],arr[i]
    return arr
 
# Driver program to test above function.